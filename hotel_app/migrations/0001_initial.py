# Generated by Django 4.1.7 on 2024-06-22 10:11

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import hotel_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=hotel_app.models.get_datetime, null=True, validators=[hotel_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, validators=[hotel_app.models.check_modified], verbose_name='modified')),
                ('money', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=13, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='money')),
            ],
            options={
                'verbose_name': 'client',
                'verbose_name_plural': 'clients',
                'db_table': '"hotel"."client"',
            },
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=hotel_app.models.get_datetime, null=True, validators=[hotel_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, validators=[hotel_app.models.check_modified], verbose_name='modified')),
                ('name', models.TextField(max_length=100, verbose_name='name')),
                ('address', models.TextField(blank=True, max_length=250, null=True, verbose_name='address')),
                ('rating', models.DecimalField(decimal_places=1, default=0, max_digits=2, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)], verbose_name='rating')),
            ],
            options={
                'verbose_name': 'hotel',
                'verbose_name_plural': 'hotels',
                'db_table': '"hotel"."hotel"',
                'ordering': ['name', 'rating'],
            },
        ),
        migrations.CreateModel(
            name='HotelService',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=hotel_app.models.get_datetime, null=True, validators=[hotel_app.models.check_created], verbose_name='created')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='description')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=11, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cost')),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.hotel', verbose_name='hotel')),
            ],
            options={
                'verbose_name': 'Relationship hotel service',
                'verbose_name_plural': 'Relationships hotel service',
                'db_table': '"hotel"."hotel_service"',
            },
        ),
        migrations.CreateModel(
            name='Reserve',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=hotel_app.models.get_datetime, null=True, validators=[hotel_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, validators=[hotel_app.models.check_modified], verbose_name='modified')),
                ('start_date', models.DateField(validators=[hotel_app.models.check_date], verbose_name='Date, from')),
                ('end_date', models.DateField(validators=[hotel_app.models.check_date], verbose_name='Date, until')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=11, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price')),
            ],
            options={
                'verbose_name': 'reserve',
                'verbose_name_plural': 'reserves',
                'db_table': '"hotel"."reserve"',
            },
        ),
        migrations.CreateModel(
            name='ReserveService',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=hotel_app.models.get_datetime, null=True, validators=[hotel_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, validators=[hotel_app.models.check_modified], verbose_name='modified')),
                ('reserve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.reserve')),
            ],
            options={
                'verbose_name': 'Relationship reserve service',
                'verbose_name_plural': 'Relationships reserve service',
                'db_table': '"hotel"."reserve_service"',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=hotel_app.models.get_datetime, null=True, validators=[hotel_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, validators=[hotel_app.models.check_modified], verbose_name='modified')),
                ('name', models.TextField(max_length=100, verbose_name='name')),
                ('hotels', models.ManyToManyField(through='hotel_app.HotelService', to='hotel_app.hotel', verbose_name='hotels')),
                ('reserves', models.ManyToManyField(through='hotel_app.ReserveService', to='hotel_app.reserve', verbose_name='reserves')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
                'db_table': '"hotel"."service"',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, default=hotel_app.models.get_datetime, null=True, validators=[hotel_app.models.check_created], verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, null=True, validators=[hotel_app.models.check_modified], verbose_name='modified')),
                ('category', models.TextField(choices=[('apartment', 'apartment'), ('business', 'business'), ('de luxe', 'de luxe'), ('duplex', 'duplex'), ('standart', 'standart'), ('studio', 'studio'), ('suite', 'suite'), ('family', 'family'), ('single', 'single'), ('double', 'double')], verbose_name='category')),
                ('floor', models.IntegerField(blank=True, null=True, verbose_name='floor')),
                ('number', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='number')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=11, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cost')),
                ('clients', models.ManyToManyField(through='hotel_app.Reserve', to='hotel_app.client', verbose_name='clients')),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.hotel', verbose_name='hotel')),
            ],
            options={
                'verbose_name': 'room',
                'verbose_name_plural': 'rooms',
                'db_table': '"hotel"."room"',
                'ordering': ['category', 'floor'],
            },
        ),
        migrations.AddField(
            model_name='reserveservice',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.service'),
        ),
        migrations.AddField(
            model_name='reserve',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room', to='hotel_app.room', verbose_name='room'),
        ),
        migrations.AddField(
            model_name='reserve',
            name='services',
            field=models.ManyToManyField(through='hotel_app.ReserveService', to='hotel_app.service', verbose_name='services'),
        ),
        migrations.AddField(
            model_name='reserve',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.client', verbose_name='reserved_user'),
        ),
        migrations.AddField(
            model_name='hotelservice',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.service', verbose_name='service'),
        ),
        migrations.AddField(
            model_name='hotel',
            name='services',
            field=models.ManyToManyField(through='hotel_app.HotelService', to='hotel_app.service', verbose_name='services'),
        ),
        migrations.AddField(
            model_name='client',
            name='rooms',
            field=models.ManyToManyField(through='hotel_app.Reserve', to='hotel_app.room', verbose_name='rooms'),
        ),
        migrations.AddField(
            model_name='client',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='reserveservice',
            unique_together={('reserve', 'service')},
        ),
        migrations.AlterUniqueTogether(
            name='hotelservice',
            unique_together={('hotel', 'service')},
        ),
    ]
